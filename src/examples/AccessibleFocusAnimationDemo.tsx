/**
 * AccessibleFocusAnimationDemo.tsx
 * 
 * Demonstrates the accessible focus state animations that respect
 * user preferences for reduced motion, high contrast, and other
 * accessibility settings.
 */

import React, { useState } from 'react';
import styled from 'styled-components';
import { 
  useAccessibleFocusAnimation, 
  FocusAnimationStyle,
  FocusAnimationIntensity,
  focusAnimation
} from '../animations/accessibility/AccessibleFocusAnimation';
import { useReducedMotion } from '../animations/accessibility/useReducedMotion';
import { useHighContrast } from '../animations/accessibility/useHighContrast';

// Demo container
const DemoContainer = styled.div`
  padding: 20px;
  max-width: 800px;
  margin: 0 auto;
`;

// Section for controls
const ControlsSection = styled.div`
  background: rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 20px;
`;

// Control row
const ControlRow = styled.div`
  display: flex;
  gap: 15px;
  margin-bottom: 10px;
  flex-wrap: wrap;
`;

// Control group
const ControlGroup = styled.div`
  flex: 1;
  min-width: 200px;
`;

// Label for controls
const Label = styled.label`
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
`;

// Select dropdown
const Select = styled.select`
  width: 100%;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
`;

// Toggle switch container
const ToggleContainer = styled.label`
  display: flex;
  align-items: center;
  cursor: pointer;
`;

// Toggle switch
const ToggleSwitch = styled.div<{ $checked: boolean }>`
  position: relative;
  width: 40px;
  height: 20px;
  background: ${({ $checked }) => $checked ? '#4CAF50' : '#ccc'};
  border-radius: 20px;
  transition: background 0.3s;
  margin-right: 10px;
  
  &::after {
    content: '';
    position: absolute;
    top: 2px;
    left: ${({ $checked }) => $checked ? '22px' : '2px'};
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: white;
    transition: left 0.3s;
  }
`;

// Color input container
const ColorInputContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
`;

// Color input
const ColorInput = styled.input`
  width: 40px;
  height: 30px;
  padding: 0;
  border: none;
  cursor: pointer;
`;

// Demo elements section
const DemoSection = styled.div`
  margin-bottom: 20px;
`;

// Grid for demo elements
const ElementsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 15px;
  margin-top: 15px;
`;

// Base focus element
const FocusElement = styled.div<{ 
  $focusStyle: FocusAnimationStyle; 
  $intensity: FocusAnimationIntensity 
}>`
  height: 100px;
  border-radius: 8px;
  background: rgba(255, 255, 255, 0.1);
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  padding: 10px;
  text-align: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: background 0.3s;
  
  &:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  /* Focus styles will be generated by the hook */
`;

// Button element with focus animation
const FocusButton = styled.button<{ 
  $customFocusStyle: any;
  $highVisibility: boolean;
}>`
  padding: 10px 15px;
  background: #3498db;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background 0.3s;
  
  &:hover {
    background: #2980b9;
  }
  
  ${({ $customFocusStyle }) => $customFocusStyle};
`;

// Input element with focus animation
const FocusInput = styled.input<{ 
  $customFocusStyle: any;
}>`
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
  
  ${({ $customFocusStyle }) => $customFocusStyle};
`;

// Link with focus animation
const FocusLink = styled.a<{ 
  $customFocusStyle: any;
}>`
  color: #3498db;
  text-decoration: none;
  
  &:hover {
    text-decoration: underline;
  }
  
  ${({ $customFocusStyle }) => $customFocusStyle};
`;

// Card with dynamically applied focus animation
const DynamicCard = styled.div<{ $focusCSS: any }>`
  height: 100px;
  border-radius: 8px;
  background: rgba(255, 255, 255, 0.1);
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  padding: 10px;
  text-align: center;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: background 0.3s;
  
  &:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  ${({ $focusCSS }) => $focusCSS}
`;

// Status indicator
const StatusIndicator = styled.div<{ $active: boolean }>`
  display: inline-block;
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin-right: 8px;
  background-color: ${({ $active }) => $active ? '#4CAF50' : '#ccc'};
`;

// Status display
const StatusDisplay = styled.div`
  background: rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  padding: 15px;
  margin-top: 20px;
`;

// Demo component
export const AccessibleFocusAnimationDemo: React.FC = () => {
  // State for customizing focus animations
  const [focusStyle, setFocusStyle] = useState<FocusAnimationStyle>(FocusAnimationStyle.OUTLINE_PULSE);
  const [intensity, setIntensity] = useState<FocusAnimationIntensity>(FocusAnimationIntensity.STANDARD);
  const [primaryColor, setPrimaryColor] = useState<string>('#0078FF');
  const [secondaryColor, setSecondaryColor] = useState<string>('#C6E0FF');
  const [highVisibility, setHighVisibility] = useState<boolean>(false);
  
  // Get accessibility preferences
  const { prefersReducedMotion, setAppReducedMotion, appReducedMotion } = useReducedMotion();
  const { isHighContrast, setHighContrast, appHighContrast } = useHighContrast();
  
  // Generate focus animation styles using the hook
  const { 
    focusStyle: generatedFocusStyle,
    combinedFocusStyles,
    generateFocusStyle
  } = useAccessibleFocusAnimation({
    color: primaryColor,
    secondaryColor: secondaryColor,
    style: focusStyle,
    intensity: intensity,
    highVisibility: highVisibility
  });
  
  // Generate custom focus styles for different elements
  const buttonFocusStyle = generateFocusStyle({
    style: FocusAnimationStyle.GLOW,
    highVisibility: true
  });
  
  const inputFocusStyle = generateFocusStyle({
    style: FocusAnimationStyle.BORDER,
    intensity: FocusAnimationIntensity.STRONG
  });
  
  const linkFocusStyle = generateFocusStyle({
    style: FocusAnimationStyle.UNDERLINE,
    duration: 500
  });
  
  // Create array of all animation styles for demo
  const allFocusStyles = Object.values(FocusAnimationStyle);
  
  return (
    <DemoContainer>
      <h2>Accessible Focus Animation Demo</h2>
      <p>
        This demo shows how focus animations can respect user accessibility preferences
        while still providing clear visual feedback for keyboard navigation.
      </p>
      
      <ControlsSection>
        <h3>Customize Focus Animation</h3>
        <ControlRow>
          <ControlGroup>
            <Label htmlFor="focus-style">Focus Animation Style:</Label>
            <Select 
              id="focus-style"
              value={focusStyle}
              onChange={(e) => setFocusStyle(e.target.value as FocusAnimationStyle)}
            >
              {allFocusStyles.map(style => (
                <option key={style} value={style}>
                  {style.replace('_', ' ').toUpperCase()}
                </option>
              ))}
            </Select>
          </ControlGroup>
          
          <ControlGroup>
            <Label htmlFor="intensity">Animation Intensity:</Label>
            <Select 
              id="intensity"
              value={intensity}
              onChange={(e) => setIntensity(e.target.value as FocusAnimationIntensity)}
            >
              {Object.values(FocusAnimationIntensity).map(level => (
                <option key={level} value={level}>
                  {level.toUpperCase()}
                </option>
              ))}
            </Select>
          </ControlGroup>
        </ControlRow>
        
        <ControlRow>
          <ControlGroup>
            <Label htmlFor="primary-color">Primary Color:</Label>
            <ColorInputContainer>
              <ColorInput 
                type="color" 
                id="primary-color" 
                value={primaryColor}
                onChange={(e) => setPrimaryColor(e.target.value)}
              />
              <span>{primaryColor}</span>
            </ColorInputContainer>
          </ControlGroup>
          
          <ControlGroup>
            <Label htmlFor="secondary-color">Secondary Color:</Label>
            <ColorInputContainer>
              <ColorInput 
                type="color" 
                id="secondary-color" 
                value={secondaryColor}
                onChange={(e) => setSecondaryColor(e.target.value)}
              />
              <span>{secondaryColor}</span>
            </ColorInputContainer>
          </ControlGroup>
        </ControlRow>
        
        <ControlRow>
          <ControlGroup>
            <ToggleContainer>
              <ToggleSwitch 
                $checked={highVisibility}
                onClick={() => setHighVisibility(!highVisibility)}
              />
              <span>High Visibility Mode</span>
            </ToggleContainer>
          </ControlGroup>
          
          <ControlGroup>
            <ToggleContainer>
              <ToggleSwitch 
                $checked={appReducedMotion}
                onClick={() => setAppReducedMotion(!appReducedMotion)}
              />
              <span>Reduced Motion</span>
            </ToggleContainer>
          </ControlGroup>
          
          <ControlGroup>
            <ToggleContainer>
              <ToggleSwitch 
                $checked={appHighContrast}
                onClick={() => setHighContrast(!appHighContrast)}
              />
              <span>High Contrast</span>
            </ToggleContainer>
          </ControlGroup>
        </ControlRow>
      </ControlsSection>
      
      <DemoSection>
        <h3>Dynamic Focus Example</h3>
        <p>Tab through these elements to see different focus animations. All respect your accessibility preferences.</p>
        
        <ElementsGrid>
          <DynamicCard
            tabIndex={0}
            $focusCSS={combinedFocusStyles}
          >
            Dynamic Focus Animation<br/>
            (Tab to Focus)
          </DynamicCard>
          
          <FocusButton
            $customFocusStyle={focusAnimation({
              style: FocusAnimationStyle.GLOW,
              highVisibility: true,
              color: primaryColor,
              secondaryColor: secondaryColor
            })}
            $highVisibility={true}
          >
            Focus Button
          </FocusButton>
          
          <FocusInput
            placeholder="Focus Input"
            $customFocusStyle={focusAnimation({
              style: FocusAnimationStyle.BORDER,
              intensity: FocusAnimationIntensity.STRONG,
              color: primaryColor,
              secondaryColor: secondaryColor
            })}
          />
          
          <FocusLink
            href="#"
            tabIndex={0}
            $customFocusStyle={focusAnimation({
              style: FocusAnimationStyle.UNDERLINE,
              duration: 500,
              color: primaryColor,
              secondaryColor: secondaryColor
            })}
          >
            Focus Link (Tabindex)
          </FocusLink>
        </ElementsGrid>
      </DemoSection>
      
      <DemoSection>
        <h3>All Focus Animation Styles</h3>
        <p>Tab through these elements to see all available focus animation styles.</p>
        
        <ElementsGrid>
          {allFocusStyles.map(style => (
            <DynamicCard
              key={style}
              tabIndex={0}
              $focusCSS={focusAnimation({
                style: style as FocusAnimationStyle,
                intensity: intensity,
                color: primaryColor,
                secondaryColor: secondaryColor,
                highVisibility: highVisibility
              })}
            >
              {style.replace('_', ' ').toUpperCase()}
            </DynamicCard>
          ))}
        </ElementsGrid>
      </DemoSection>
      
      <StatusDisplay>
        <h3>Accessibility Status</h3>
        <p>
          <StatusIndicator $active={prefersReducedMotion} /> 
          Reduced Motion: {prefersReducedMotion ? 'Enabled' : 'Disabled'}
        </p>
        <p>
          <StatusIndicator $active={isHighContrast} /> 
          High Contrast: {isHighContrast ? 'Enabled' : 'Disabled'}
        </p>
        <p>
          <StatusIndicator $active={highVisibility} /> 
          High Visibility: {highVisibility ? 'Enabled' : 'Disabled'}
        </p>
        <p>
          When reduced motion is enabled, animations will be simplified or disabled, 
          except for high visibility elements which always maintain clear visual feedback.
        </p>
      </StatusDisplay>
    </DemoContainer>
  );
};

export default AccessibleFocusAnimationDemo;